diff -up vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php.patch vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php
--- vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php.patch	2014-09-30 15:30:42.843376528 +0200
+++ vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php	2014-09-30 15:30:46.338468714 +0200
@@ -20,6 +20,7 @@
 namespace Doctrine\ORM\Mapping;
 
 use BadMethodCallException;
+use Doctrine\Instantiator\Instantiator;
 use InvalidArgumentException;
 use RuntimeException;
 use Doctrine\DBAL\Types\Type;
@@ -587,11 +588,9 @@ class ClassMetadataInfo implements Class
     public $reflFields = array();
 
     /**
-     * The prototype from which new instances of the mapped class are created.
-     *
-     * @var object
+     * @var \Doctrine\Instantiator\InstantiatorInterface|null
      */
-    private $_prototype;
+    private $instantiator;
 
     /**
      * Initializes a new ClassMetadata instance that will hold the object-relational mapping
@@ -605,6 +604,7 @@ class ClassMetadataInfo implements Class
         $this->name = $entityName;
         $this->rootEntityName = $entityName;
         $this->namingStrategy = $namingStrategy ?: new DefaultNamingStrategy();
+        $this->instantiator   = new Instantiator();
     }
 
     /**
@@ -826,15 +826,7 @@ class ClassMetadataInfo implements Class
      */
     public function newInstance()
     {
-        if ($this->_prototype === null) {
-            if (PHP_VERSION_ID === 50429 || PHP_VERSION_ID === 50513) {
-                $this->_prototype = $this->reflClass->newInstanceWithoutConstructor();
-            } else {
-                $this->_prototype = unserialize(sprintf('O:%d:"%s":0:{}', strlen($this->name), $this->name));
-            }
-        }
-
-        return clone $this->_prototype;
+        return $this->instantiator->instantiate($this->name);
     }
     /**
      * Restores some state that can not be serialized/unserialized.
@@ -845,7 +837,8 @@ class ClassMetadataInfo implements Class
     public function wakeupReflection($reflService)
     {
         // Restore ReflectionClass and properties
-        $this->reflClass = $reflService->getClass($this->name);
+        $this->reflClass    = $reflService->getClass($this->name);
+        $this->instantiator = $this->instantiator ?: new Instantiator();
 
         foreach ($this->fieldMappings as $field => $mapping) {
             $this->reflFields[$field] = isset($mapping['declared'])

{#
Copyright (c) 2014, Anaphore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3)The name of the author may not be used to
   endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
#}

{% extends base_template %}

{% block css %}
    {{ parent() }}
    {% stylesheets
        'js/leaflet/leaflet.css'
        'js/leaflet/leaflet.fullscreen/Control.FullScreen.css'
        'js/leaflet/leaflet.geosearch/l.geosearch.css'
        output='assetic/css/compiled/leaflet_plugins.css'
        filter='cssrewrite'
    %}
    <link href="{{ asset_url }}" type="text/css" rel="stylesheet" media="screen" />
    {% endstylesheets %}
    <link href="{{ asset('js/leaflet/leaflet.sidebar/L.Control.Sidebar.css') }}" type="text/css" rel="stylesheet" media="screen" />
{% endblock %}

{% block js_calls %}
    {{ parent() }}
    <script src="{{ asset('js/leaflet/leaflet.js') }}" type="text/javascript"></script>
    {% javascripts
        'js/leaflet/leaflet.fullscreen/Control.FullScreen.js'
        'js/leaflet/leaflet.geosearch/l.control.geosearch.js'
        'js/leaflet/leaflet.geosearch/l.geosearch.provider.openstreetmap.js'
        output='assetic/js/compiled/leaflet_plugins.js'
    %}
        <script src="{{ asset_url }}" type="text/javascript"></script>
    {% endjavascripts %}
    <script src="{{ asset('js/leaflet/leaflet.sidebar/L.Control.Sidebar.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/leaflet/leaflet.sidebarcontrol/L.Control.SidebarBtn.js') }}" type="text/javascript"></script>
{% endblock %}

{% block sonata_admin_content %}
    <div id="map" class="big"></div>
    <div id="sidebar">
        <div id="missing-list">
            <h3>{{ _('Not geolocalized places') }} ({{ missing|length }})</h3>
            <p>{{ _('Click on a location to perform automatic search.') }}</p>
            <ul>
            {% for origin, toponym in missing %}
                <li>
                    <a class="geoloc" href="#">{{ origin }}</a>
                </li>
            {% endfor %}
            </ul>
        </div>
        <div id="proposal"class="hidden">
            <h3>{{ _('Proposals for:') }}<br/><em class="placename"></em></h3>
            <a class="back">{{ _('Back') }}</a>
            <div class="list"></div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    var allpoints;
    var current;
    var selected;
    var map;
    var _da_url = '{{ path('bach_toponym_geoloc', {name: 'NAME'}) }}';

    /**
     * Returns element height, including margins
     */
    function _eltRealSize(_elt) {
        var _s = 0;
        _s += _elt.outerHeight();
        _s += parseFloat(_elt.css('margin-top').replace('px', ''));
        _s += parseFloat(_elt.css('margin-bottom').replace('px', ''));
        return _s;
    }

    var _features_stored = [];
    function onEachFeature(feature, layer) {
        var _content = '{{ _('Possible position for location:')|escape('js') }}';
        _content += '<ul>';
        _content += '<li>{{ _('Original:')|escape('js') }} <em>' + current + '</em></em></li>';
        _content += '<li>{{ _('Found:')|escape('js') }} ' + feature.properties.name  + ' ({{ _('OSM id:')|escape('js') }} ' + feature.properties.osm_id + ')</li>';
        _content += '<li>{{ _('Coordinates:')|escape('js') }} ' + feature.properties.lat + '/' + feature.properties.lon  + '</li>';
        _content += '</ul>';
        var _count = _features_stored.length;
        _features_stored[_count] = feature.properties.elt;
        _content += '<a href="#' + _count  + '" class="store">{{ _('Store that position?')|escape('js') }}</a>';
        popup = layer.bindPopup(_content);
    }

    var _layers;

    var _populate_list = function(_list, _url, _current, _free = false) {
        $.ajax({
            url: _url,
            {% include '::loader.js.twig' with {'parent_elt': '#sidebar', 'error_message': _('Unable to propose positions :(')} %}
            success: function(data) {
                if ( data.length > 0 ) {
                    var _ul = $('<ul></ul>');

                    if ( _layers ) {
                        _layers.clearLayers();
                    }
                    var _features = [];
                    _features_stored = [];

                    var _indexed_name = $('em.placename').text();

                    data.forEach(function(elt) {
                        if ( elt.geojson != '' ) {
                            var _a = $('<a href="#" id="id_' + elt.osm_id  + '">' + elt.name + ' (' + elt.osm_id + ')'  + '</a>');

                            elt.indexed_name = _indexed_name;

                            _feature = JSON.parse(elt.geojson);
                            _feature['properties'] = {
                                'indexed_name': elt.indexed_name,
                                'name': elt.name,
                                'osm_id': elt.osm_id,
                                'lat': elt.lat,
                                'lon': elt.lon,
                                'bbox': elt.bbox,
                                'elt': elt
                            }
                            _features[_features.length] = _feature;
                            _a.on('click', function(){
                                var _bbox = elt.bbox.split(',');
                                var _bounds = L.latLngBounds(
                                    L.latLng(_bbox[0], _bbox[2]),
                                    L.latLng(_bbox[1], _bbox[3])
                                );
                                map.fitBounds(_bounds, {
                                    padding: [50, 50],
                                    maxZoom: 13
                                });

                                return false;
                            });

                            var _li = $('<li></li>');
                            _a.appendTo(_li);
                            _li.appendTo(_ul);
                        }
                    });

                    if ( _features.length == 0 ) {
                        var _res = '<p>{{ _('No results found :/')|escape('js') }}</p>';
                        if ( !_free ) {
                            _list.append(_res);
                        } else {
                            _list.prepend(_res)
                        }
                    } else {
                        var _geojson = {
                            "type": "FeatureCollection",
                            "features": _features
                        };

                        allpoints = L.geoJson(_geojson, {
                            onEachFeature: onEachFeature
                        });

                        _layers = L.layerGroup([allpoints]).addTo(map);
                        popup.openPopup();
                        map.fitBounds(allpoints.getBounds(), {
                            padding: [50, 50],
                            maxZoom: 13
                        });

                        map.on('popupopen', function(e){
                            var _link = $(e.popup._contentNode).find('.store');
                            _link.off();
                            _link.on('click', function() {
                                var _this = $(this);
                                var _count = _this.attr('href').replace('#', '');

                                $.ajax({
                                    url: '{{ path('bach_store_geoloc') }}',
                                    method: 'POST',
                                    data: _features_stored[_count],
                                    {% include '::loader.js.twig' with {'parent_elt': '#map', 'error_message': _('Unable to store that location :(')} %}
                                    success: function(data) {
                                        if ( data.success === true ) {
                                            alert('{{ _('Position has been successfully stored!')|escape('js') }}');

                                            $('#proposal').addClass('hidden');
                                            $('#missing-list').removeClass('hidden');
                                            _layers.clearLayers();

                                            $('#missing-list li').filter(
                                                function(){
                                                    return $(this).find('a').text() === data.name
                                                }
                                            ).remove();
                                        } else {
                                            alert('{{ _('Something went wrong trying to store position :(')|escape('js') }}');
                                        }
                                    }
                                });
                                return false;
                            });
                        });
                        if ( !_free ) {
                            _list.append(_ul);
                        } else {
                            _list.prepend(_ul);
                        }
                    }
                } else {
                    var _res = '<p>{{ _('No results found :/')|escape('js') }}</p>';
                    if ( !_free ) {
                        _list.append(_res);
                    } else {
                        _list.prepend(_res)
                    }
                }

                if ( !_free ) {
                    var _free_search = $('<form><p>{{ _('No satisfying matches?<br/>Enter you own search:')|escape('js') }}</p><input type="text" id="free_search" value="'+ _current +'"/><input type="submit" value="Search"/></form>');
                    _list.append(_free_search);
                    _list.find('form').submit(function(ev){
                        ev.preventDefault();
                        _current = $('#free_search').val();
                        _list.find('ul,p').remove();
                        _populate_list(
                            _list,
                            _da_url.replace('NAME', _current),
                            _current,
                            true
                        );
                    });
                }
            }
        });
    };

    $(function(){
        $('.geoloc').on('click', function(){
            var _this = $(this);
            _this.closest('div').addClass('hidden');

            current = _this.html();
            var _proposal = $('#proposal');

            _proposal.removeClass('hidden')
                .find('.placename').html(current);
            var _list = _proposal.find('.list');

            _list.empty();
            _populate_list(
                _list,
                _da_url.replace('NAME', _this.html()),
                current
            );

            return false;
        });

        $('.back').on('click', function(){
            var _this = $(this);
            _this.parent('div').addClass('hidden');
            $('#missing-list').removeClass('hidden');
            current = null;
            selected = null;
            if ( _layers ) {
                _layers.clearLayers();
            }
        });

        var wheight = $(window).height();
        var _oSize = 0;

        _oSize += _eltRealSize($('#navigation'));
        _oSize += _eltRealSize($('.navbar'));
        _oSize += parseFloat(
            $('#container').css('padding-top').replace('px', '')
        );
        _oSize += parseFloat(
            $('#container').css('padding-bottom').replace('px', '')
        );

        var newHeight = Math.floor(wheight - _oSize) + "px";
        $("#map").css("height", newHeight);

        map = L.map('map', {
            minZoom: 1
        }).setView([47.010, 5.087], 5);

        var fullScreen = new L.Control.FullScreen();
        map.addControl(fullScreen);

        var sidebar = L.control.sidebar('sidebar', {
            position: 'right'
        });

        sidebar.on('hide show', function () {
            $('.leaflet-control-sidebarbtn').toggleClass('show');
        });

        map.addControl(sidebar);
        sidebar.show();

        L.control.sidebarbtn({
            strings: {
                title: '{{ _('Show/Hide sidebar')|escape('js') }}'
            },
            sidebar: sidebar
        }).addTo(map);

        L.tileLayer('{{ tiles_url }}', {
            {% if tiles_subdomains is iterable -%}
            subdomains: [{% for subdomain in tiles_subdomains %}'{{ subdomain }}'{% if not loop.last %}, {% endif %}{% endfor %}],
            {% endif -%}
            maxZoom: 18,
            attribution: '{{ _('© Cartographic data')|escape('js') }} <a href="http://openstreetmap.org">{{ _('OpenStreetMap contributors')|escape('js') }}</a>, {{ _('© Imagery')|escape('js') }} {{ tiles_attribution|raw }}'
        }).addTo(map);

    });
{% endblock %}

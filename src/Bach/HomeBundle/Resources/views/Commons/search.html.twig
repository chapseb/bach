{#
Copyright (c) 2014, Anaphore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3)The name of the author may not be used to
   endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
#}

{% extends '::base.html.twig' %}

{% block search_path %}bach_search{%endblock %}
{% block fullfacet_path %}bach_fullfacet{%endblock %}
{% block do_search_path %}bach_do_search{% endblock %}
{% block cookie_param_name %}bach_view_params{% endblock %}

{% block css %}
    {% if min_date is defined and max_date is defined -%}
    <link href="{{ asset('css/jqrangeslider/iThing-min.css') }}" type="text/css" rel="stylesheet" media="screen" />
    {% endif %}
    {% if show_maps -%}
    {% stylesheets
        'js/leaflet/leaflet.css'
        'js/leaflet/leaflet.fullscreen/Control.FullScreen.css'
        'js/leaflet/leaflet.geosearch/l.geosearch.css'
        output='assetic/css/compiled/leaflet_plugins.css'
        filter='cssrewrite'
    %}
    <link href="{{ asset_url }}" type="text/css" rel="stylesheet" media="screen" />
    {% endstylesheets %}
    {% endif %}
{% endblock %}

{% block menu %}
    {% if min_date is defined and max_date is defined or show_maps and geojson is defined and geojson != null %}
        <ul class="interactions">
        {% if show_maps and geojson is defined and geojson != null -%}
            <li><a id="sh_map" href="?show_map={% if show_map == true %}off{% else %}on{% endif %}" title="{{ _('Shows or hides map') }}"{% if show_map == false %} class="disabled"{% endif %}><img src="{% include '::images/map.html.twig' %}" alt="{{ _('Show/Hide map') }}"/></a></li>
        {%- endif %}
        {% if min_date is defined and max_date is defined -%}
            <li><a id="sh_daterange" href="?show_daterange={% if show_daterange == true %}off{% else %}on{% endif %}" title="{{ _('Shows or hides date range graph') }}"{% if show_daterange == false %} class="disabled"{% endif %}><img src="{% include '::images/calendar.html.twig' %}" alt="{{ _('Show/Hide date range') }}"/></a></li>
        {%- endif %}
        </ul>
    {% endif %}

    {% if filters is defined %}
        <h2>{{ _('Active filters') }} <a href="{{ path(block('search_path'), {query_terms: q, clear_filters: true}) }}" class="clear-btn" title="{{ _('Clear refined query') }}">{{ _('Clear') }}</a></h2>
        <div id="active_filters">
            {% for filter_name,values in filters %}
                {% if values is not iterable %}
                    {% set values = []|merge([values]) %}
                {% endif %}
            <h3>{% if facet_names[filter_name] is defined %} {{ facet_names[filter_name] }}{% else %}{{ _('Unknown filter') }}{% endif %}</h3>
            <ul>
                {% for value in values %}
                <li>
                    <a href="{{ path(block('search_path'), {query_terms: q, rm_filter_field: filter_name, rm_filter_value: value}) }}" class="remove_filter" title="{{ _('Remove filter on \'%value%\'')|replace({'%value%': value}) }}">
                        {% if facet_labels[filter_name] is defined %}
                            {{ facet_labels[filter_name][value] -}}
                        {% else %}
                            {{ value -}}
                        {% endif %}
                    </a>
                </li>
                {% endfor %}
            </ul>
            {% endfor %}
        </div>
    {% endif %}


        {% if facets is defined and facets|length > 0 and searchResults|length > 0 %}
        <h2>{{ _('Refine Query') }}</h2>
        <div id="facets">
            {% for facet_field,facet in facets %}
                <h3>{{ facet.label }}</h3>
                <div{% if facet_field == 'cDate' %} class="range_date"{% endif %}>
                {% if facet_field == 'cDate' %}
                    <form id="cDate_change">
                        <ul>
                            <li>
                                <label for="range_date_min">{{ _('From:') }}</label>
                                <input type="text" name="range_date_min" id="range_date_min" value="{{ by_year_min }}"/>
                                <label for="range_date_max"> {{ _('to:') }}</label>
                                <input type="text" name="range_date_max" id="range_date_max" value="{{ by_year_max }}"/>
                                <input type="submit" id="range_date_set" value="{{ _('Go') }}"/>
                            </li>
                        </ul>
                    </form>
                    <script type="text/javascript">
                        $(function(){
                            $('#range_date_min,#range_date_max').spinner({
                                min: {{ by_year_min }},
                                max: {{ by_year_max }},
                                page: 100,
                                value: $(this).val()
                            });
                            $('#range_date_set').button();
                            $('#cDate_change').on('submit', function(){
                                //check for date input validity
                                var _min = $('#range_date_min').val();
                                var _max = $('#range_date_max').val();

                                var _valid = true;

                                if ( isNaN(_min) || _min % 1 != 0 ) {
                                    alert('{{ _('Please enter an integer as start date!')|escape('js') }}');
                                    _valid = false;
                                } else if (_min < {{by_year_min }})  {
                                    alert('{{ _('Start date must be greater than %date')|escape('js') }}'.replace('%date', {{ by_year_min }}));
                                    _valid = false;
                                }

                                if ( isNaN(_max) || _max % 1 != 0 ) {
                                    alert('{{ _('Please enter an integer as end date!')|escape('js') }}');
                                    _valid = false;
                                } else if (_max > {{by_year_max }})  {
                                    alert('{{ _('End date must be earlier than %date')|escape('js') }}'.replace('%date', {{ by_year_max }}));
                                    _valid = false;
                                }

                                return _valid;
                            });
                        });
                    </script>
                {% endif %}
                    <ol>
                    {% set index_name = facet.index_name %}

                    {% if facet_name is defined and facet_name == index_name %}
                        {% set facet_content = facet.content %}
                    {% else %}
                        {% set facet_content = facet.content[:10] %}
                    {% endif %}
                    {% for facet,count in facet_content %}
                        <li>
                            <a href="{{ path(block('search_path'), {query_terms: q, filter_field: index_name, filter_value: facet}) }}">
                            {% if facet_labels[index_name] is defined %}
                                {{ facet_labels[index_name][facet] }} ({{ count }})
                            {% else %}
                                {{ facet }} ({{ count }})
                            {% endif %}
                            </a>
                        </li>
                    {% endfor %}
                    {% if facet.content|length > 10 and not (facet_name is defined and facet_name == index_name) %}
                        <li class="show_more"><a href="{{ path(block('search_path'), {query_terms: q, page: page, facet_name: index_name}) }}">{{ _('Show more (%count left)')|replace({'%count': facet.content|length-10}) }}</a></li>
                    {% endif %}
                    </ol>
                </div>
            {% endfor %}
        </div>
        {% endif %}

        {% if tagcloud is defined %}
            <ul id="tagcloud">
            {% for tag,weight in tagcloud %}
                <li>
                    <a href="{{ path(block('search_path'), {query_terms: tag|url_encode}) }}" class="tag{{ weight }}">{{ tag }}</a>
                </li>
            {% endfor %}
            </ul>
        {% endif %}

{% endblock %}

{% block container %}
    {% if searchResults is not defined %}
        <h2 id="welcome">{% block subtitle %}{% endblock %}</h2>
    {% endif %}

    {% if form is defined %}
    <form action="{{ path(block('do_search_path')) }}" method="post" {{ form_enctype(form) }} name="search" id="search">
        <div>
            {{ form_widget(form.query) }}
            {{ form_widget(form._token) }}
            {{ form_widget(form.perform_search) }}
            {% if has_advanced is defined %}
            <span id="adv_link"><a href="?adv_search=true" title="{{ _('Switch to advanced search form') }}">{{ _('Advanced search') }}</a></span>
            {% endif %}
        </div>
    </form>
    {% endif %}

    {% if adv_form is defined %}
        {{ form(adv_form) }}
        <span id="adv_link"><a href="?adv_search=false" title="{{ _('Switch to simple search form') }}">{{ _('Simple search') }}</a></span>
    {% endif  %}


    {% if suggestions is defined and searchResults is defined and searchResults|length > 0 %}
    <aside id="suggestions">
        <strong>{{ _('Additionnal search suggestions:') }}</strong><br/>
        {% for term,termResult in suggestions %}
            {% if termResult|length > 0 %}
                {% for suggest in termResult %}
                    <a href="{{ path(block('search_path'), {query_terms: suggest}) }}">{{ suggest }}</a>
                {% endfor %}
            {% endif %}
        {% endfor %}
    </aside>
    {% endif %}

        {% if min_date is defined and max_date is defined -%}
        <div id="dates_range" class="hidden"></div>
        {% if by_year is defined %}
        <div id="dates_plot" class="hidden" title="{{ _('Click and drag to select dates period') }}"></div>
        {% endif %}
        {%- endif %}
        {% if show_maps -%}
        <div id="map" class="hidden"></div>
        {%- endif %}

    {% if searchResults is defined %}
    <section id="search_results" role="main">
        {% if searchResults|length > 0 %}
        <div class="results_count">
            {% if resultCount == 1 %}
                {{ _('1 result') }}
            {% else %}
                {{ _('Results %resultStart% to %resultEnd% on %resultCount%')|replace({'%resultStart%': resultStart, '%resultEnd%': resultEnd, '%resultCount%': resultCount}) }}
            {% endif %}
            {% if available_orders|length > 0 or available_views|length > 0 %}
            {% spaceless %}
            <nav id="change_view">
                {% if available_orders|length > 0 %}
                <label for="results_order">{{ _('Order:') }}</label>
                <div class="select_container">
                    <select name="results_order" id="results_order">
                        <option value="0"{% if results_order == 0 %} selected="selected"{% endif %}>{{ _('Relevance (default)') }}</option>
                        {% for order in available_orders %}
                        <option value="{{ loop.index }}"{% if results_order == loop.index %} selected="selected"{% endif %}>{{ order }}</option>
                        {% endfor %}
                    </select>
                </div>
                {% endif %}
                {% if available_views|length > 0 %}
                    {% for key,values in available_views %}
                <a href="{{ path(block('search_path'), {query_terms: q, view: key}) }}" class="btn-{{ key }}{% if view == key %} selected{% endif %}" title="{{ values.title }}">{{ values.text }}</a>
                    {% endfor %}
                {% endif %}
            </nav>
            {% endspaceless %}
            {% endif %}
        </div>
            {% block show_results %}{% endblock %}
            {% include 'pagination.html.twig' with {
                currentFilters: { query_terms: q },
                currentPage: page,
                paginationPath: block('search_path'),
                lastPage: totalPages
            } only %}
        {% else %}
            <p>{{ _('No result found.') }}</p>
            {% if scSearchResults is not null %}
            <aside id="suggestions">
                {{ _('Spelling suggestions:') }}
                {% for suggestion in scSearchResults %}
                    {% for word in suggestion.getWords() %}
                        <a href="{{ path(block('search_path'), {query_terms: word.word}) }}">{{ word.word }}</a>
                    {% endfor %}
                {% endfor %}
            </aside>
            {% endif %}
        {% endif %}
    </section>
    {% endif %}
{% endblock %}

{% block js_calls %}
    {{ parent() }}
    {% javascripts
        'js/jquery-ui/jquery.ui.accordion.min.js'
        'js/jquery-ui/jquery.ui.menu.min.js'
        'js/jquery-ui/jquery.ui.autocomplete.min.js'
        'js/jquery-ui/jquery.ui.spinner.min.js'
        'js/jquery-ui/jquery.ui.tabs.min.js'
        output='assetic/js/compiled/search_jquery-ui.js'
    %}
        <script src="{{ asset_url }}" type="text/javascript"></script>
    {% endjavascripts %}
    {% if min_date is defined and max_date is defined -%}
    {% javascripts
        'js/flot/jquery.flot.min.js'
        'js/flot/jquery.flot.selection.min.js'
        'js/flot/jquery.flot.resize.min.js'
        output='assetic/js/compiled/search_dates.js'
    %}
        <script src="{{ asset_url }}" type="text/javascript"></script>
    {% endjavascripts %}
    <script src="{{ asset('js/jQDateRangeSlider-min.js') }}" type="text/javascript"></script>
    {% endif %}
    <script src="{{ asset('js/jquery.cookie.js') }}" type="text/javascript"></script>
    {% if show_maps %}
    <script src="{{ asset('js/leaflet/leaflet.js') }}" type="text/javascript"></script>
    {% javascripts
        'js/leaflet/leaflet.fullscreen/Control.FullScreen.js'
        'js/leaflet/leaflet.geosearch/l.control.geosearch.js'
        'js/leaflet/leaflet.geosearch/l.geosearch.provider.openstreetmap.js'
        output='assetic/js/compiled/leaflet_plugins.js'
    %}
        <script src="{{ asset_url }}" type="text/javascript"></script>
    {% endjavascripts %}
    {% endif %}
    <!--[if lte IE 8]><script src="{{ asset('js/jqplot/excanvas.min.js') }}" type="text/javascript"></script><![endif]-->
    <script type="text/javascript" src="{{ asset('dewplayer/swfobject.js') }}"></script>
{% endblock %}

{% block mobile_js_on %}
    {% if searchResults is defined and searchResults|length > 0 %}
    $('.show_more a').unbind('click');
    {% endif %}
{% endblock %}

{% block javascripts %}
            $.cookie.json = true;
            var _view_params = $.cookie('{{ block('cookie_param_name') }}');

            if ( !_view_params ) {
                _view_params = {
                    'daterange': {% if show_daterange == true %}true{% else %}false{% endif %},
                    'map':       {% if show_map == true %}true{% else %}false{% endif %}
                };
            }

            function filterOnDate(min_date, max_date) {
                {% if q is defined and q != '' -%}
                var _loc = document.location.href;
                var n = _loc.indexOf('?');
                var _new_loc = _loc.substring(0, n != -1 ? n : _loc.lenght);
                {% else -%}
                var _new_loc = '{{ path('bach_search') }}';
                {% endif %}


    {% if selected_min_date is defined and selected_max_date is defined %}
                if ( min_date == '{{ selected_min_date }}'
                    && max_date == '{{ selected_max_date }}'
                ) {
                    //nothing has changed!
                    return false;
                }
    {% endif %}

                _new_loc += '?filter_field[]=date_begin&filter_value[]=' + min_date +
                    '&filter_field[]=date_end&filter_value[]=' + max_date;
                document.location = _new_loc;
            }

            $('#facets').accordion({
                icons: {
                    header: 'ui-icon-circle-plus',
                    activeHeader: 'ui-icon-circle-minus'
                },
                heightStyle: 'content',
                {% if active_facet is defined -%}
                active: {{ active_facet }},
                {%- endif %}
                collapsible: true
            });

            {% if searchResults is defined and searchResults|length > 0 %}
            $('.show_more a').click(function() {
                var _this = $(this);
                var _facet_name = $(_this.parents('div')[0]).prev('h3').text();

                var _elt = $('<div id="display_facets" title="' + _facet_name + '"></div>');
                _elt.appendTo('body');

                var _width = $(window).width() * 0.8;
                var _height = $(window).height() * 0.8;

                var _index = _this.attr('href').replace('{{ path(block('search_path'), {query_terms: q, page: page}) }}/', '');
                _index = _index.substr(_index.lastIndexOf('/')+1);
                var _url = '{{ path(block('fullfacet_path'), {query_terms: q, name: 'THENAME'}) }}'.replace('THENAME', _index);

                $.ajax({
                    url: _url,
                    data: {
                        orig_href: _url
                    },
                    type: 'POST',
                    {% include '::loader.js.twig' with {'error_message': _('An error occured loading terms :(')} %}
                    success: function(data) {
                        _elt.append(data);
                        _elt.dialog({
                            height: _height,
                            width: _width,
                            modal: true,
                            close: function(event, ui){
                                _elt.remove();
                            }
                        });
                    }
                });

                return false;
            });
            {% endif %}

            {% if available_orders|length > 0 %}
            $('#results_order').change(function(){
                var _da_url = '{{ path(block('search_path'), {query_terms: q, results_order: 'ORDER'}) }}';
                window.location.href  = _da_url.replace('ORDER', $('#results_order option:selected').val());
            });
            {% endif %}

            {% if min_date is defined and max_date is defined %}
            var _is_first_load = true;
            if ( _view_params['daterange'] == true ) {
                $('#dates_range').removeClass('hidden');
            }
            $('#dates_range').dateRangeSlider({
                formatter:function(val){
                    var year = val.getFullYear();
                    return year;
                },
                arrows: false,
                step: {
                    years: 1
                },
                bounds:
                {
                    min: new Date({{ min_date }}, 0, 1),
                    max: new Date({{ max_date }}, 11, 31)
                },
                defaultValues:
                {
                    min: new Date({{ selected_min_date }}, 0, 1),
                    max: new Date({{ selected_max_date }}, 11, 31)
                }
            }).bind("valuesChanged", function(e, data){
                if ( _is_first_load ) {
                    //valuesChanged is always triggerd once, on page load...
                    _is_first_load = false;
                } else {
                    var _min = data.values.min;
                    var _max = data.values.max;

                    filterOnDate(
                        _min.getFullYear(),
                        _max.getFullYear()
                    );
                }
            });

                {% if by_year is defined -%}
            var plot_options = {
                series: {
                    bars: {
                        show: true,
                        align: "center",
                        fill: true,
                        fillColor: "{{ _plot_fill_color }}"
                    }
                },
                colors: ["rgba(163,150,141,0)"],
                legend: { noColumns: 2 },
                xaxis: { tickDecimals: 0 },
                yaxis: { tickDecimals: 0 },
                selection: {
                    mode: "x",
                    color: '{{ _plot_selection_color }}'
                },
                grid: {
                    backgroundColor: null,
                    borderWidth: 1,
                    borderColor: "{{ _plot_border_color }}"
                },
                shadowSize: 0
            };

            var _dates_plot = $('#dates_plot');
            var plot;

            var _initPlot = function() {
                plot = $.plot(_dates_plot, [{{ by_year|json_encode|raw }}], plot_options);

                plot.setSelection({
                    xaxis: {
                        from: {{by_year_min}},
                        to: {{by_year_max}}
                    }
                });

                _dates_plot.bind("plotselected", function (event, ranges) {
                    filterOnDate(
                        Math.floor(ranges.xaxis.from),
                        Math.ceil(ranges.xaxis.to)
                    );
                }).tooltip({
                    position: {
                        my: 'left bottom',
                        at: 'left top'
                    }
                });
            }

            if ( _view_params['daterange'] == true ) {
                _dates_plot.removeClass('hidden');
                _initPlot();
            }
                {% endif %}
            {% endif %}

            _setCookie = function() {
                $.cookie('{{ block('cookie_param_name') }}', _view_params, { expires: 365 });
            }

            $('#sh_daterange').on('click', function(){
                $('#dates_plot').toggleClass('hidden');
                if ( !plot) {
                    _initPlot();
                }
                $('#dates_range').toggleClass('hidden');
                $(this).toggleClass('disabled');
                _view_params['daterange'] = !$('#dates_plot').hasClass('hidden');
                _setCookie();
                return false;
            });
{% if show_maps %}
    {% if geojson is defined and geojson != null %}
            $('#sh_map').on('click', function(){
                $('#map').toggleClass('hidden');
                $(this).toggleClass('disabled');
                _view_params['map'] = !$('#map').hasClass('hidden');
                _setCookie();
                if ( !map ) {
                    _initMap();
                }
                return false;
            });

            var map;

            var _initMap = function() {
                map = L.map('map', {
                    minZoom: 1
                });

                var fullScreen = new L.Control.FullScreen();
                map.addControl(fullScreen);

                new L.Control.GeoSearch({
                    provider: new L.GeoSearch.Provider.OpenStreetMap(),
                    showMarker: false,
                    searchLabel: '{{ _('Enter your search...')|escape('js') }}',
                    notFoundMessage: '{{ _('Sorry, that place cannot be found.')|escape('js') }}',
                    zoomLevel: 10
                }).addTo(map);

                L.tileLayer('{{ tiles_url }}', {
                    {% if tiles_subdomains is iterable -%}
                    subdomains: [{% for subdomain in tiles_subdomains %}'{{ subdomain }}'{% if not loop.last %}, {% endif %}{% endfor %}],
                    {% endif -%}
                    maxZoom: 18,
                    attribution: '{{ _('© Cartographic data')|escape('js') }} <a href="http://openstreetmap.org">{{ _('OpenStreetMap contributors')|escape('js') }}</a>, {{ _('© Imagery')|escape('js') }} {{ tiles_attribution|raw }}'
                }).addTo(map);

                // control that shows location info on hover
                var info = L.control();

                info.onAdd = function (map) {
                    this._div = L.DomUtil.create('div', 'info');
                    this.update();
                    return this._div;
                };

                info.update = function (props) {
                    this._div.innerHTML = (props ?
                        '<strong>' + props.name + '</strong> - ' + props.results
                        : '{{ _('Hover over a zone') }}');
                };

                info.addTo(map);

                // get color depending on number of results
                function getColor(d) {
                    return d > 200 ? '#800026' :
                        d > 100    ? '#BD0026' :
                        d > 50     ? '#E31A1C' :
                        d > 20     ? '#FC4E2A' :
                        d > 10     ? '#FD8D3C' :
                        d > 5      ? '#FEB24C' :
                        d > 1      ? '#FED976' :
                                    '#FFEDA0' ;
                }

                function style(feature) {
                    return {
                        weight: 2,
                        opacity: 1,
                        color: 'white',
                        dashArray: '3',
                        fillOpacity: 0.7,
                        fillColor: getColor(feature.properties.results)
                    };
                }

                function highlightFeature(e) {
                    var layer = e.target;

                    try{
                        layer.setStyle({
                            weight: 1,
                            color: '#666',
                            dashArray: '',
                            fillOpacity: 0.7
                        });

                        if (!L.Browser.ie && !L.Browser.opera) {
                            layer.bringToFront();
                        }
                    } catch (ex) {}

                    info.update(layer.feature.properties);
                }

                var allpoints;

                function resetHighlight(e) {
                    {% for field in geojson|keys -%}
                    {{ field|replace({'-': '_'}) }}_points.resetStyle(e.target);
                    {% endfor %}
                    info.update();
                }

                function facetFeature(e) {
                    var _da_url = '{{ path(block('search_path'), {query_terms: q, filter_field: 'geoloc'}) }}';
                    window.location.href  = _da_url + '&filter_value=' + e.target.feature.properties.name;
                }

                function onEachFeature(feature, layer) {
                    layer.on({
                        mouseover: highlightFeature,
                        mouseout: resetHighlight,
                        click: facetFeature
                    });
                }

                {% for field, geo in geojson -%}
                    var {{ field|replace({'-': '_'}) }}_points = L.geoJson({{ geo|raw }}, {
                        style: style,
                        onEachFeature: onEachFeature
                    });
                    var {{ field|replace({'-': '_'}) }}_layer = L.layerGroup([{{ field|replace({'-': '_'}) }}_points]);
                {% endfor %}

                var overlays = {
                {% for field in geojson|keys -%}
                    '{{ solr_fields.getFieldLabel(field) }}': {{ field|replace({'-': '_'}) }}_layer{% if not loop.last %},{% endif %}
                {% endfor %}
                };
                var _groups = L.control.layers({}, overlays).addTo(map);

                var _layers = L.layerGroup([
                 {% for field in geojson|keys -%}
                    {{ field|replace({'-': '_'}) }}_layer{% if not loop.last %},{% endif %}
                {% endfor %}
                ]).addTo(map);

                var allpoints = L.featureGroup([
                 {%- for field in geojson|keys -%}
                    {{ field|replace({'-': '_'}) }}_points{% if not loop.last %},{% endif %}
                {%- endfor -%}
                ]);

                map.fitBounds(allpoints.getBounds(), {
                    padding: [50, 50],
                    maxZoom: 13
                });

                var _legend;

                function _loadLegend() {
                    _legend = L.control({position: 'bottomright'});
                    _legend.onAdd = function (map) {
                        var div = L.DomUtil.create('div', 'info legend'),
                            {# TODO: it would be better to set grades dynamically as it depends on search results/corpus #}
                            grades = [0, 1, 5, 10, 20, 50, 100, 200],
                            labels = [],
                            from, to;

                        for (var i = 0; i < grades.length; i++) {
                            from = grades[i];
                            to = grades[i + 1];

                            labels.push(
                                '<i style="background:' + getColor(from + 1) + '"></i> ' +
                                from + (to ? '&ndash;' + to : '+'));
                        }
                        div.innerHTML = labels.join('<br/>');
                        return div;
                    };
                    _legend.addTo(map);
                };

                var _zones_loaded = false;
                var _zones_actives = true;
                var _state_changed = false;
                var _zones_layer;
                var _zones_overlay;

                function checkZones(e) {
                    zoom = map.getZoom();

                    if ( zoom >= 9 && _zones_actives ) {
                        //if we've just zoomed, or if we drag map, reload zones
                        _zones_loaded = true;
                        var _da_url = '{{ path('bach_geozones', {bbox: 'BBOX', facets_name: map_facets_name}) }}';

                        $.ajax({
                            url: _da_url.replace('BBOX', map.getBounds().toBBoxString()),
                            {% include '::loader.js.twig' with {'parent_elt': '#map', 'silent_error': true} %}
                            success: function(data) {
                                if ( !_zones_layer ) {
                                    _zones_layer = L.geoJson(data, {
                                        style: style,
                                        onEachFeature: onEachFeature
                                    });
                                    _layers.addLayer(_zones_layer);
                                    _groups.addOverlay(_zones_layer, '{{ _('Zones') }}');
                                    _state_changed = true;

                                } else {
                                    if ( !_layers.hasLayer(_zones_layer) ) {
                                        _layers.addLayer(_zones_layer);
                                        _state_changed = true;
                                    }

                                    _zones_layer.clearLayers();
                                    _zones_layer.addData(data);
                                }

                                if ( _state_changed ) {
                                    if ( !_legend ) {
                                        _loadLegend();
                                    }
                                    _state_changed = false;
                                }
                            }
                        });
                    }

                    if ( zoom >= 9 ) {
                        if ( !_zones_overlay && _zones_layer ) {
                            _groups.addOverlay(_zones_layer, '{{ _('Zones') }}');
                        }
                    }

                    if ( zoom < 9 && _zones_loaded == true ) {
                        _zones_loaded = false;
                        var _actives = _zones_actives;
                        _layers.removeLayer(_zones_layer);
                        _groups.removeLayer(_zones_layer);
                        map.removeControl(_legend);
                        _zones_actives = _actives;
                        _legend = null;
                    }
                }

                map.on('zoomend', checkZones);
                map.on('dragend', checkZones);
                map.on('resize', checkZones);
                checkZones();

                map.on('overlayadd overlayremove', function(e) {
                    console.log(e.name);
                    if ( e.type == 'overlayremove' && e.name == '{{ _('Zones') }}' ) {
                        _zones_actives = false;
                        map.off('zoomend', checkZones);
                        map.off('dragend', checkZones);
                        map.off('resize', checkZones);
                        map.removeControl(_legend);
                    }
                    if ( e.type == 'overlayadd' && e.name == '{{ _('Zones') }}' ) {
                        _zones_actives = true;
                        map.on('zoomend', checkZones);
                        map.on('dragend', checkZones);
                        map.on('resize', checkZones);
                        checkZones();
                        _loadLegend();
                    }
                });
            }

            if ( _view_params['map'] == true ) {
                $('#map').removeClass('hidden');
                _initMap();
            }
    {% endif %}
{% endif %}
            function preg_quote( str ) {
                // http://kevin.vanzonneveld.net
                // +   original by: booeyOH
                // +   improved by: Ates Goral (http://magnetiq.com)
                // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                // +   bugfixed by: Onno Marsman
                // *     example 1: preg_quote("$40");
                // *     returns 1: '\$40'
                // *     example 2: preg_quote("*RRRING* Hello?");
                // *     returns 2: '\*RRRING\* Hello\?'
                // *     example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
                // *     returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'

                return (str+'').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1");
            }

            {% block autocomplete %}{% endblock %}
            {% block player %}{% endblock %}
{% endblock %}


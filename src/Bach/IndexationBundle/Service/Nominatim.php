<?php
/**
 * Nominatim query
 *
 * PHP version 5
 *
 * @category Indexation
 * @package  Bach
 * @author   Johan Cwiklinski <johan.cwiklinski@anaphore.eu>
 * @license  Unknown http://unknown.com
 * @link     http://anaphore.eu
 */

namespace Bach\IndexationBundle\Service;

use Bach\IndexationBundle\Entity\Toponym;

/**
 * Nominatim query
 *
 * @category Indexation
 * @package  Bach
 * @author   Johan Cwiklinski <johan.cwiklinski@anaphore.eu>
 * @license  Unknown http://unknown.com
 * @link     http://anaphore.eu
 */
class Nominatim
{
    private $_query_options = array(
        'format'            => 'xml',
        'polygon_geojson'   => '1',
        'email'             => 'dev@anaphore.eu',
        'limit'             => '2'
    );
    private $_uri = "http://nominatim.openstreetmap.org/search";

    /**
     * Get results for a toponym
     *
     * @param Toponym $toponym Toponym
     *
     * @return string
     */
    public function proceed(Toponym $toponym)
    {
        $options = $this->_query_options;

        if ( $toponym->getCountry() !== null ) {
            $options['country'] = $toponym->getCountry();
        }

        if ( $toponym->getCounty() !== null ) {
            if ( $toponym->getCounty() !== 'Guyane' ) {
                $options['county'] = $toponym->getCounty();
            } else {
                //specfiic case for Guyane :/
                if ( isset($options['country']) ) {
                    unset($options['country']);
                }
                $options['state'] = $toponym->getCounty();
            }
        }

        if ( $toponym->getType() === Toponym::TYPE_TOWN ) {
            $options['city'] = $toponym->getName();
        } elseif ( $toponym->getType() === Toponym::TYPE_SPECIFIC ) {
            if ( $toponym->getName() !== '' ) {
                $options['city'] = $toponym->getName();
            }
            $options['q'] = $toponym->getSpecificName();
        }

        $result = $this->_send(
            $this->_uri,
            $options
        );

        $xml = new \SimpleXMLElement($result);
        $places = $xml->xpath('//place');

        if ( count($places) > 1 ) {
            echo 'More than one place find for ' . $toponym->__toString() .
                ", ignoring.\n";
            return false;
        } else if (count($places) == 0 ) {
            echo 'No result found for ' . $toponym->__toString() . " :(\n";
            return false;
        } else {
            return $places[0];
        }

    }

    /**
     * Retrieve a city by its name
     *
     * @param Toponym $toponym Toponym
     *
     * @return SimpleXMLElement
     */
    public function retrieveCity(Toponym $toponym)
    {
        $options = $this->_query_options;
        $options['city'] = $toponym->getName();
        if ( $toponym->getCounty() !== null ) {
            $options['county'] = $toponym->getCounty();
        }
        if ( $toponym->getCountry() !== null ) {
            $options['country'] = $toponym->getCountry();
        }

        /*$result = $this->_send(
            $this->_uri,
            $options
        );*/

        $result = <<<XML
<?xml version="1.0" encoding="UTF-8" ?>
<searchresults timestamp='Fri, 15 Nov 13 09:20:53 +0000' attribution='Data Â© OpenStreetMap contributors, ODbL 1.0. http://www.openstreetmap.org/copyright' querystring='Aigues-Mortes' polygon='false' exclude_place_ids='97583166' more_url='http://nominatim.openstreetmap.org/search?format=xml&amp;exclude_place_ids=97583166&amp;accept-language=fr,fr-fr;q=0.8,en-us;q=0.5,en;q=0.3&amp;q=Aigues-Mortes'>
<place place_id='97583166' osm_type='relation' osm_id='272287' place_rank='16' boundingbox="43.4958076477051,43.592098236084,4.07572412490845,4.24428701400757" geojson='{"type":"Polygon","coordinates":[[[4.0757243,43.589307900000001],[4.0784357,43.590009000000002],[4.0826551,43.591406800000001],[4.0845462,43.592013999999999],[4.0849466,43.592094000000003],[4.0851939,43.5920974],[4.0854476,43.592068300000001],[4.0859671,43.591931799999998],[4.086879,43.591562500000002],[4.087616,43.591172],[4.0929532,43.588251700000001],[4.098267,43.585214499999999],[4.0987859,43.585147800000001],[4.0999441,43.585190900000001],[4.1004476,43.585245999999998],[4.1007983,43.585319599999998],[4.1012378,43.585341399999997],[4.1028868,43.585192900000003],[4.1031968,43.585146100000003],[4.103273,43.585160600000002],[4.103717,43.585157000000002],[4.1050971,43.5854912],[4.1141031,43.587240600000001],[4.1168654,43.587797600000002],[4.1196392,43.588322300000002],[4.1214783,43.588623499999997],[4.1233986,43.588894500000002],[4.1243941,43.588972800000001],[4.1253898,43.588981400000002],[4.1267227,43.588735399999997],[4.1284023,43.5880188],[4.1299648,43.587169799999998],[4.130978,43.586761099999997],[4.1436332,43.5850559],[4.1458031,43.584961],[4.1502924,43.585479499999998],[4.1541712,43.585772599999999],[4.1613989,43.585741800000001],[4.1621141,43.585779000000002],[4.165476,43.585730300000002],[4.1678378,43.5858992],[4.1690253,43.585963599999999],[4.1702118,43.585976299999999],[4.1727947,43.585725699999998],[4.1742023,43.585428800000003],[4.1774807,43.585657900000001],[4.1783898,43.584879100000002],[4.1785509,43.585039799999997],[4.1787765,43.585069300000001],[4.1792823,43.5849227],[4.1800358,43.5849124],[4.1801578,43.584947300000003],[4.1809262,43.5854578],[4.181009,43.585489099999997],[4.1819768,43.585688500000003],[4.1822392,43.585799799999997],[4.1825713,43.585997399999997],[4.1828921,43.586332300000002],[4.1831268,43.586678200000001],[4.183351,43.586866899999997],[4.1834266,43.586890099999998],[4.1843893,43.586798999999999],[4.1844923,43.586795500000001],[4.1845651,43.586797400000002],[4.1845755,43.5868915],[4.1846029,43.586931],[4.1847221,43.5869517],[4.1855917,43.586985800000001],[4.1860273,43.587028099999998],[4.1868004,43.587086200000002],[4.1868831,43.587077000000001],[4.1869485,43.586998199999996],[4.1872325,43.586973700000001],[4.1876885,43.5869663],[4.18844,43.586990800000002],[4.1893954,43.587238800000002],[4.1905518,43.587622500000002],[4.1907542,43.587732500000001],[4.1910718,43.5877883],[4.1919532,43.588047000000003],[4.1926071,43.5881987],[4.1939021,43.588377700000002],[4.1948023,43.588323899999999],[4.1960563,43.5885283],[4.1963214,43.5885058],[4.1973961,43.588592499999997],[4.1976801,43.588775599999998],[4.20006,43.588974100000001],[4.2013998,43.589359399999999],[4.2022959,43.589440799999998],[4.2024157,43.589440600000003],[4.2044505,43.589335400000003],[4.2047242,43.589310099999999],[4.2049927,43.5893564],[4.2054299,43.589407299999998],[4.2055929,43.589438299999998],[4.2057017,43.5894677],[4.2060226,43.589642400000002],[4.2062574,43.589690300000001],[4.2064072,43.5896914],[4.2064954,43.589678200000002],[4.2065572,43.589658100000001],[4.2066346,43.589618700000003],[4.2067398,43.589550799999998],[4.207126,43.589331199999997],[4.2078449,43.588954200000003],[4.2079105,43.588931100000003],[4.2082657,43.588901200000002],[4.2083624,43.588881800000003],[4.2084165,43.5888615],[4.2086756,43.5887381],[4.2090508,43.588467600000001],[4.2092027,43.588422000000001],[4.2094442,43.588361999999996],[4.2095567,43.588370400000002],[4.2096517,43.588386200000002],[4.209676,43.588400999999998],[4.2098144,43.588537100000003],[4.2102185,43.588662300000003],[4.2105123,43.588928199999998],[4.2105791,43.5889807],[4.2107988,43.588318000000001],[4.2108166,43.588232900000001],[4.2107721,43.588084299999998],[4.2107011,43.588004099999999],[4.2105631,43.587891999999997],[4.2099448,43.587444599999998],[4.2096312,43.5871943],[4.2096252,43.587194699999998],[4.2097188,43.586453900000002],[4.2097288,43.586290699999999],[4.2098848,43.584671200000003],[4.2098144,43.584006100000003],[4.2094693,43.5822833],[4.2101639,43.581474800000002],[4.2103485,43.581191400000002],[4.2105412,43.580793800000002],[4.2108459,43.580263000000002],[4.2108237,43.580268099999998],[4.2114054,43.579181699999999],[4.2115696,43.578829800000001],[4.2116109,43.578659999999999],[4.2116092,43.578572999999999],[4.2126351,43.576862900000002],[4.2129175,43.5763569],[4.2130961,43.575912799999998],[4.2132302,43.575212700000002],[4.2144867,43.573705799999999],[4.2148021,43.5733684],[4.2163261,43.571460600000002],[4.2176086,43.569680900000002],[4.2210073,43.565868299999998],[4.2213196,43.565574300000002],[4.2216123,43.565273500000004],[4.2240475,43.561055199999998],[4.224246,43.560166000000002],[4.2243573,43.560063200000002],[4.2245506,43.559473500000003],[4.2253746,43.558448300000002],[4.2254105,43.558393299999999],[4.2254222,43.558359199999998],[4.2254238,43.558247299999998],[4.2252728,43.557547700000001],[4.2252805,43.557236400000001],[4.225366,43.556743300000001],[4.225028,43.555749800000001],[4.2242845,43.555391200000003],[4.2232281,43.554800100000001],[4.2253389,43.550201600000001],[4.227928,43.537195099999998],[4.2442867,43.501503900000003],[4.2416407,43.499990400000002],[4.2414544,43.499896700000001],[4.2399099,43.499232200000002],[4.2396057,43.499065199999997],[4.2393683,43.498904500000002],[4.2392864,43.498833699999999],[4.2379694,43.497494000000003],[4.2378958,43.497396700000003],[4.2378586,43.497304499999998],[4.237815,43.497111699999998],[4.2370213,43.497246699999998],[4.236821,43.497224299999999],[4.2366845,43.497259499999998],[4.2365411,43.497260400000002],[4.2359684,43.497116200000001],[4.2356241,43.497076900000003],[4.2354385,43.497112199999997],[4.2352234,43.497086500000002],[4.235132,43.4971411],[4.2346094,43.497115200000003],[4.231671,43.497194200000003],[4.2270145,43.497081000000001],[4.2203696,43.496498600000002],[4.2171105,43.495965499999997],[4.2149972,43.4960071],[4.2146089,43.4958673],[4.2144428,43.495832900000003],[4.2139023,43.4958113],[4.2122675,43.495904000000003],[4.2110432,43.496079299999998],[4.2080891,43.496607300000001],[4.207282,43.496797399999998],[4.2047317,43.497700700000003],[4.2035548,43.498204999999999],[4.2027109,43.498603899999999],[4.2024654,43.498788099999999],[4.2019145,43.499120599999998],[4.200839,43.499839199999997],[4.2001763,43.500326100000002],[4.1996855,43.500751299999997],[4.1990462,43.501412500000001],[4.1984252,43.502184800000002],[4.1979585,43.502839000000002],[4.1979821,43.5030097],[4.197619,43.503515100000001],[4.1974065,43.503674199999999],[4.1966338,43.504150899999999],[4.1962634,43.504659199999999],[4.195626,43.504987300000003],[4.1955431,43.5051196],[4.1954699,43.505175399999999],[4.1952945,43.505228500000001],[4.1951829,43.505400700000003],[4.194647,43.505783299999997],[4.194625,43.505935399999998],[4.1946203,43.5060553],[4.1946249,43.506397999999997],[4.1940667,43.506583999999997],[4.1931671,43.507081399999997],[4.1927395,43.507223799999998],[4.1925612,43.507373000000001],[4.1923968,43.5076836],[4.1920465,43.507706800000001],[4.1915012,43.508117499999997],[4.1910384,43.508702499999998],[4.1907778,43.509127100000001],[4.1901838,43.5099284],[4.1899972,43.510078800000002],[4.1894036,43.510424399999998],[4.188791,43.5114947],[4.1887599,43.5115756],[4.1887748,43.511632200000001],[4.1888443,43.511772399999998],[4.1887972,43.511840200000002],[4.1885251,43.511741800000003],[4.1881844,43.511693700000002],[4.188086,43.511689099999998],[4.1880141,43.5117081],[4.1879439,43.5117689],[4.1881252,43.512052500000003],[4.1867603,43.514001800000003],[4.1859465,43.514732899999998],[4.1855133,43.515280500000003],[4.1831524,43.517775499999999],[4.1829175,43.517943099999997],[4.1824634,43.518177000000001],[4.1799931,43.5189515],[4.1795706,43.519605300000002],[4.1788814,43.520609999999998],[4.1783398,43.5215386],[4.1783183,43.5230374],[4.1783338,43.5239051],[4.1782754,43.524692199999997],[4.1782455,43.525915400000002],[4.1781864,43.5263122],[4.177366,43.529033099999999],[4.1772497,43.530009399999997],[4.1772474,43.5301787],[4.1765703,43.530850200000003],[4.1762135,43.531328199999997],[4.1759279,43.531799499999998],[4.1752081,43.533282399999997],[4.1748519,43.534388100000001],[4.1744812,43.535024700000001],[4.17416,43.535436599999997],[4.1734714,43.536228299999998],[4.1732169,43.5366146],[4.1730315,43.537054300000001],[4.1728321,43.5374014],[4.1727133,43.537567099999997],[4.1724387,43.537787199999997],[4.1720882,43.537981199999997],[4.1716808,43.538277200000003],[4.1711685,43.538700300000002],[4.1708409,43.539027699999998],[4.1656139,43.5460122],[4.1648144,43.547848399999999],[4.1629932,43.5492834],[4.1604926,43.548253799999998],[4.1507389,43.557139200000002],[4.1503876,43.557313999999998],[4.1440173,43.559752199999998],[4.1398206,43.562488399999999],[4.1391253,43.562941700000003],[4.1351209,43.562684400000002],[4.1308078,43.5644451],[4.1242903,43.565803600000002],[4.1185416,43.567914600000002],[4.1132067,43.569313100000002],[4.1090166,43.5688569],[4.1087477,43.569174400000001],[4.1081095,43.570218699999998],[4.1056023,43.572557500000002],[4.1033437,43.574757400000003],[4.1009612,43.576790699999997],[4.0975309,43.579984600000003],[4.0956853,43.581658099999999],[4.0924375,43.583052000000002],[4.0806437,43.590430400000002],[4.0800843,43.590198200000003],[4.0796308,43.590115300000001],[4.0789845,43.589889300000003],[4.0788503,43.589736500000001],[4.0786774,43.589635800000003],[4.0784293,43.589608200000001],[4.0783623,43.589537300000003],[4.0777127,43.589405800000002],[4.0771549,43.589245900000002],[4.0767686,43.589245099999999],[4.076466,43.589148700000003],[4.0762677,43.589131500000001],[4.0758089,43.589156000000003],[4.0757501,43.589215299999999],[4.0757243,43.589307900000001]]]}' lat='43.5658225' lon='4.1912837' display_name='Aigues-Mortes, Nimes, Gard, Languedoc-Roussillon, 30220, France' class='boundary' type='administrative' importance='0.84779577234387' icon='http://nominatim.openstreetmap.org/images/mapicons/poi_boundary_administrative.p.20.png'/></searchresults>
XML;

        $xml = new \SimpleXMLElement($result);
        $places = $xml->xpath('//place');

        if ( count($places) > 1 ) {
            echo 'More than one place find for ' . $name . ", ignoring.\n";
            return false;
        } else if (count($places) == 0 ) {
            echo 'No result found for ' . $name . " :(\n";
            return false;
        } else {
            return $places[0];
        }

    }

    /**
     * Sends an HTTP query (POST method) to Solr and returns
     * result.
     *
     * @param string $url     HTTP URL
     * @param array  $options Request options
     *
     * @return string
     */
    private function _send($url, $options)
    {
        if ( !is_array($options) ) {
            throw new \RuntimeException(
                'Options MUST be an array!'
            );
        }

        $url_options = array();
        foreach ( $options as $key=>$value ) {
            $url_options[] = $key . '=' . $value;
        }

        $url .= '?' . implode('&', $url_options);

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);

        $response = curl_exec($ch);
        if ( $response === false ) {
            throw new \RuntimeException(
                "Error on request:\n\tURI:" . $url . "\n\toptions:\n" .
                print_r($options, true)
            );
        }

        //get request infos
        $infos = curl_getinfo($ch);
        if ( $infos['http_code'] !== 200 ) {
            $trace = debug_backtrace();
            $caller = $trace[1];

            //At this point, core has been created, but is failing 
            //to load in solr.
            throw new \RuntimeException(
                'Something went wrong in function ' . __CLASS__ . '::' .
                $caller['function'] . "\nHTTP Request URI: " . $url .
                "\nSent options: " . print_r($options, true)
            );
        }

        return $response;
    }
}

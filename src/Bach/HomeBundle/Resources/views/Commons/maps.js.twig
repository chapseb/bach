{% if from_search is not defined %}
    {% set from_search = false %}
{% endif %}
            var map;
            var allpoints;
            var info;
            var _fields_points = [];

            {% if from_search %}
                // get color depending on number of results
                function getColor(d) {
                    return d > 200 ? '#800026' :
                        d > 100    ? '#BD0026' :
                        d > 50     ? '#E31A1C' :
                        d > 20     ? '#FC4E2A' :
                        d > 10     ? '#FD8D3C' :
                        d > 5      ? '#FEB24C' :
                        d > 1      ? '#FED976' :
                                    '#FFEDA0' ;
                }

                function style(feature) {
                    return {
                        weight: 2,
                        opacity: 1,
                        color: 'white',
                        dashArray: '3',
                        fillOpacity: 0.7,
                        fillColor: getColor(feature.properties.results)
                    };
                }

                function highlightFeature(e) {
                    var layer = e.target;

                    try{
                        layer.setStyle({
                            weight: 1,
                            color: '#666',
                            dashArray: '',
                            fillOpacity: 0.7
                        });

                        if (!L.Browser.ie && !L.Browser.opera) {
                            layer.bringToFront();
                        }
                    } catch (ex) {}

                    info.update(layer.feature.properties);
                }

                function resetHighlight(e) {
                    for ( field in _fields_points ) {
                        _fields_points[field].resetStyle(e.target);
                    }
                    info.update();
                }

            {% endif %}

            var _initMap = function(callback) {
                map = L.map('map', {
                    minZoom: 1,
                    zoomControl: false
                });

                var zoomControl = new L.Control.Zoom({
                    position: 'topleft',
                    zoomInTitle: '{{ _('Zoom in') }}',
                    zoomOutTitle: '{{ _('Zoom out') }}'
                });
                map.addControl(zoomControl);

                var fullScreen = new L.Control.FullScreen({
                    title: '{{ _('Full screen')|escape('js') }}'
                });
                fullScreen.onAdd = function(map){
                    var className = 'leaflet-control-zoom-fullscreen', container;
                    var container = zoomControl._container;
                    this._createButton(this.options.title, className, container, this.toggleFullScreen, this);
                    return container;
                }
                map.addControl(fullScreen);

                {% if from_search and display.disable_searchmap != true %}
                new L.Control.GeoSearch({
                    provider: new L.GeoSearch.Provider.OpenStreetMap(),
                    showMarker: false,
                    searchLabel: '{{ _('Search a place on the map.')|escape('js') }}',
                    notFoundMessage: '{{ _('Sorry, that place cannot be found.')|escape('js') }}',
                    zoomLevel: 10
                }).addTo(map);
                {% endif %}

                L.tileLayer('{{ tiles_url }}', {
                    {% if tiles_subdomains is iterable -%}
                    subdomains: [{% for subdomain in tiles_subdomains %}'{{ subdomain }}'{% if not loop.last %}, {% endif %}{% endfor %}],
                    {% endif -%}
                    maxZoom: 18,
                    attribution: '{{ _('© Cartographic data')|escape('js') }} <a href="http://openstreetmap.org">{{ _('OpenStreetMap contributors')|escape('js') }}</a>, {{ _('© Imagery')|escape('js') }} {{ tiles_attribution|raw }}'
                }).addTo(map);


                {% if from_search %}
                // control that shows location info on hover
                info = L.control();

                info.onAdd = function (map) {
                    this._div = L.DomUtil.create('div', 'info');
                    this.update();
                    return this._div;
                };

                info.update = function (props) {
                    this._div.innerHTML = (props ?
                        '<strong>' + props.name + '</strong> - ' + props.results
                        : '{{ _('Hover over a zone') }}');
                };

                {% endif %}

                $.ajax({
                    url: '{{ ajax_path }}',
                    {% include '::loader.js.twig' with {'parent_elt': '#map', 'silent_error': true} %}
                    success: function(data) {
                        if ( data.data.length == 0 ) {
                         {% if (centerlat is not null) and (centerlon is not null) and (zoommap is not null) %}
                            map.setView([{{centerlat}}, {{centerlon}}],{{zoommap}});
                         {% else %}
                            map.setView([47.010, 5.087], 5);
                         {% endif %}
                            var _div = $('<div class="nomapres">{{ _('No geolocalized places were found!') }} </div>');
                            {% if from_search %}
                            var _a = $('<a href="#" id="nores_hide">{{ _('Hide map') }}</a>');
                            _a.on('click', _bindMapHide);
                            _div.append(_a);
                            {% endif %}
                            $('#map').append(_div);
                            return;
                        }

                        {% if from_search %}
                        info.addTo(map);
                        {% endif %}
                        var _layers = [];
                        var _overlays = [];
                        var _markers = [];
                        {#var _marker = L.markerClusterGroup({
                            showCoverageOnHover: false,
                            disableClusteringAtZoom: 12
                        });#}

                        for ( field in data.data) {
                            var _points = L.geoJson(
                                data.data[field], {
                                    {% if from_search %}style: style,{% endif %}
                                    onEachFeature: onEachFeature
                                }
                            );
                            _fields_points[_fields_points.length] = _points;
                            {#_marker.addLayer(_points);#}

                            {#var _layer = L.layerGroup([_marker]);#}
                            var _layer = L.layerGroup([_points]);
                            _layers[_layers.length] = _layer;
                            _overlays[data.labels[field]] = _layer;
                        }
                        var _groups = L.control.layers({}, _overlays).addTo(map);

                        var _layers = L.layerGroup(_layers).addTo(map);
                        allpoints = L.featureGroup(_fields_points);

                        map.fitBounds(allpoints.getBounds(), {
                            padding: [50, 50],
                            maxZoom: 13
                        });

                        if ( callback ) {
                            callback();
                        }
                    }
                });
            }

imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    translator:      { fallback: "en" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: "%kernel.debug%"
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    session:         ~

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    #cache: false
    globals:
        lang: '%locale%'
        openid: '%openid_enabled%'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [BachIndexationBundle]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        less:
            node: /usr/bin/node
            node_paths: [/usr/local/lib/node,/usr/local/lib/node_modules,/usr/lib/node_modules]
            apply_to: \.less$
        #closure:
        #    jar: "%kernel.root_dir%/Resources/java/compiler.jar"
        #yui_css:
        #    jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        logging: false
        profiling: false
        types:
            json: Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

# Solarium Configuration

nelmio_solarium:
    clients:
        default:
            client_class: Solarium\Client
            adapter_class: Solarium\Core\Client\Adapter\Http
            endpoints: [default]
        ead:
            client_class: Solarium\Client
            adapter_class: Solarium\Core\Client\Adapter\Http
            endpoints: ead
        unimarc:
            client_class: Solarium\Client
            adapter_class: Solarium\Core\Client\Adapter\Http
            endpoints: unimarc
    endpoints:
        default:
            host: '%solr_host%'
            port: '%solr_port%'
            path: '%solr_path%'
            core: '%solr_search_core%'
            timeout: 5
        ead:
            host: '%solr_host%'
            port: '%solr_port%'
            path: '%solr_path%'
            core: '%ead_corename%'
            timeout: 5
        unimarc:
            host: '%solr_host%'
            port: '%solr_port%'
            path: '%solr_path%'
            core: '%unimarc_corename%'
            timeout: 5
bach_indexation:
    types:
        - ead
        - unimarc
    paths:
        ead: '%ead_files_path%'
        unimarc: '%unimarc_files_path%'

fos_user:
    db_driver: orm
    firewall_name: secured_area
    user_class: Application\Sonata\UserBundle\Entity\User
    profile:
        form:
            type: fos_user_profile
            handler: fos_user.profile.form.handler.default
            name: fos_user_profile_form
            validation_groups: [Authentication]

fp_open_id:
    db_driver: orm
    identity_class: Bach\HomeBundle\Entity\OpenIdIdentity

sonata_block:
    default_contexts: [cms]
    blocks:
        #Enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]

sonata_admin:
    title: Super Admin
    title_logo: /img/logo.png

sonata_user:
    security_acl: false
    class:
        user: Application\Sonata\UserBundle\Entity\User
        group: Application\Sonata\UserBundle\Entity\Group

    profile:
        form:
            type: sonata_user_profile
            #handler: sonata_user.profile.form.handler.default
            name: sonata_user_profile_form
            validation_groups: [Profile]

#lsw_memcache:
#    session:
#        client: bach
#    doctrine:
#        metadata_cache:
#            client: bach
#            entity_manager: bach          # the name of your entity_manager connection
#            document_manager: bach        # the name of your document_manager connection
#        result_cache:
#            client: bach
#            entity_manager: [bach, read]  # you may specify multiple entity_managers
#            prefix: "result_"                # you may specify a prefix for the entries
#        query_cache:
#            client: bach
#            entity_manager: bach
#    clients:
#        bach:
#            hosts:
#              - { dsn: localhost, port: 11211 }

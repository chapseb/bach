{% extends '::base.html.twig' %}

{% form_theme form _self %}

{% block css %}
    <link href="{{ asset('css/jqrangeslider/iThing-min.css') }}" type="text/css" rel="stylesheet" media="screen" />
    <link href="{{ asset('js/leaflet/leaflet.css') }}" type="text/css" rel="stylesheet" media="screen" />
    <link href="{{ asset('js/leaflet/leaflet.fullscreen/Control.FullScreen.css') }}" type="text/css" rel="stylesheet" media="screen" />
    <link href="{{ asset('js/leaflet/leaflet.geosearch/l.geosearch.css') }}" type="text/css" rel="stylesheet" media="screen" />
{% endblock %}

{% block menu %}
        <ul class="interactions">
    {% if show_maps and geojson is defined and geojson != null %}
            <li><a id="sh_map" href="?show_map={% if show_map == true %}off{% else %}on{% endif %}" title="{% trans %}Shows or hides map{% endtrans %}"><img src="{{ asset('img/map.png')  }}" alt="{% trans %}Show/Hide map{% endtrans %}"/></a></li>
    {% endif %}
            <li><a id="sh_daterange" href="?show_daterange={% if show_daterange == true %}off{% else %}on{% endif %}" title="{% trans %}Shows or hides date range graph{% endtrans %}"><img src="{{ asset('img/calendar.png') }}" alt="{% trans %}Show/Hide date range{% endtrans %}"/></a></li>
        </ul>

        {% if facets is defined and searchResults|length > 0 %}
        <h2>
            {% trans %}Refine Query{% endtrans %}
            {% if filters is defined %}
            <a href="{{ path('bach_search', {query_terms: q, clear_filters: true}) }}" class="clear-btn" title="{% trans %}Clear refined query{% endtrans %}">{% trans %}Clear{% endtrans %}</a>
            {% endif %}
        </h2>
        <div id="facets">
            {% for facet_field,facet in facets %}
                <h3>{{ facet.label }}</h3>
                <div>
                    <ol>
                    {#% set index_name = 'c' ~ facet_field|capitalize %#}
                    {% set index_name = facet.index_name %}

                    {% if facet_name is defined and facet_name == index_name %}
                        {% set facet_content = facet.content %}
                    {% else %}
                        {% set facet_content = facet.content[:10] %}
                    {% endif %}
                    {% for facet,count in facet_content %}
                        <li>
                            <a href="{{ path('bach_search', {query_terms: q, filter_field: index_name, filter_value: facet}) }}">
                            {% if facet_labels[index_name] is defined %}
                                {{ facet_labels[index_name][facet] }} ({{ count }})
                            {% else %}
                                {{ facet }} ({{ count }})
                            {% endif %}
                            </a>
                        </li>
                    {% endfor %}
                    {% if facet.content|length > 10 and not (facet_name is defined and facet_name == index_name) %}
                        <li class="show_more"><a href="{{ path('bach_fullfacet', {query_terms: q, facet_name: index_name}) }}">{% trans with {'%count%': facet.content|length -10} %}Show more (%count% left){% endtrans %}</a></li>
                    {% endif %}
                    </ol>
                </div>
            {% endfor %}
        </div>
        {% endif %}

        {% if tagcloud is defined %}
            <ul id="tagcloud">
            {% for tag,weight in tagcloud %}
                <li>
                    <a href="{{ path('bach_search', {query_terms: tag|url_encode}) }}" class="tag{{ weight }}">{{ tag }}</a>
                </li>
            {% endfor %}
            </ul>
        {% endif %}

{% endblock %}

{% block container %}
    {% if searchResults is not defined %}
        <h2 id="welcome">{% trans %}Welcome to Bach's!{% endtrans %}</h2>
    {% endif %}

    <form action="{{ path('bach_do_search') }}" method="post" {{ form_enctype(form) }} name="search" id="search">
        <div>
            {{ form_widget(form.query) }}
            {{ form_widget(form._token) }}
            {{ form_widget(form.perform_search) }}
        </div>
    </form>
    {% if suggestions is defined and searchResults is defined and searchResults|length > 0 %}
    <aside id="suggestions">
        {% trans %}Additionnal search suggestions:{% endtrans %}
        {% for term,termResult in suggestions %}
            {% if termResult|length > 0 %}
                {% for suggest in termResult %}
                    <a href="{{ path('bach_search', {query_terms: suggest}) }}">{{ suggest }}</a>
                {% endfor %}
            {% endif %}
        {% endfor %}
    </aside>
    {% endif %}

    {% if filters is defined %}
        {% set coma = ', ' %}
        <nav id="active_filters">
            <strong>{% trans %}Active filters:{% endtrans %}</strong>
            {% for filter_name,values in filters %}
                {% if values is not iterable %}
                    {% set values = []|merge([values]) %}
                {% endif %}
            <ul>
                {% for value in values %}
                <li>
                    <a href="{{ path('bach_search', {query_terms: q, rm_filter_field: filter_name, rm_filter_value: value}) }}" class="remove_filter" title="{% trans %}Remove filter on '%value%'{% endtrans %}">
                        {{ facet_names[filter_name] }} >
                        {% if facet_labels[filter_name] is defined %}
                            {{ facet_labels[filter_name][value] -}}
                        {% else %}
                            {{ value -}}
                        {% endif %}
                    </a>
                </li>
                {% endfor %}
            </ul>
            {% endfor %}
        </nav>
    {% endif %}

    <div id="dates_plot" class="hidden"></div>
    <div id="dates_range" class="hidden"></div>
    {% if show_maps %}
    <div id="map" class="hidden"></div>
    {% endif %}

    {% if solr_qry is defined %}
    <div class="debug">
        Raw query: <pre>{{ solr_qry }}</pre>
    </div>
    {% endif %}

    {% if searchResults is defined %}
    <section id="search_results" role="main">
        {% if searchResults|length > 0 %}
        <div class="results_count">
            {% if resultCount == 1 %}
                {% trans %}1 result{% endtrans %}
            {% else %}
                {% trans %}Results %resultStart% to %resultEnd% on %resultCount%{% endtrans %}
            {% endif %}
            {% spaceless %}
            <nav id="change_view">
                <label for="results_order">{% trans %}Order:{% endtrans %}</label>
                <div class="select_container">
                    <select name="results_order" id="results_order">
                        <option value="0"{% if results_order == 0 %} selected="selected"{% endif %}>{% trans %}Relevance (default){% endtrans %}</option>
                        <option value="1"{% if results_order == 1 %} selected="selected"{% endif %}>{% trans %}Alphabetic{% endtrans %}</option>
                        <option value="2"{% if results_order == 2 %} selected="selected"{% endif %}>{% trans %}Document logic{% endtrans %}</option>
                    </select>
                </div>
                <a href="{{ path('bach_search', {query_terms: q, view: 'list'}) }}" class="btn-list{% if view == 'list' %} selected{% endif %}" title="{% trans %}View search results as a list, with images{% endtrans %}">{% trans %}List{% endtrans %}</a>
                <a href="{{ path('bach_search', {query_terms: q, view: 'txtlist'}) }}" class="btn-txtlist{% if view == 'txtlist' %} selected{% endif %}" title="{% trans %}View search results as a list, without images{% endtrans %}">{% trans %}Text only list{% endtrans %}</a>
                <a href="{{ path('bach_search', {query_terms: q, view: 'thumbs'}) }}" class="btn-thumb{% if view == 'thumbs' %} selected{% endif %}" title="{% trans %}View search results as thumbnails{% endtrans %}">{% trans %}Thumnails{% endtrans %}</a>
            </nav>
            {% endspaceless %}
        </div>
            {% for document in searchResults %}
                <article id="result_{{ document.uniqid }}" role="document" about="{{ document.fragmentid }}"{% if view == 'thumbs' %} class="thumbs"{% endif %}>
                    {% if view == 'thumbs' %}
                    <h3 property="dc:title">
                        <a href="{{ path('bach_display_document', {docid: document.fragmentid}) }}" class="display_doc">
                        {%- if hlSearchResults.getResult(document.uniqid).getField('cUnittitle')|length > 0 -%}
                            {{ hlSearchResults.getResult(document.uniqid).getField('cUnittitle')[0]|raw }}
                        {%- elseif document.cUnittitle is defined -%}
                            {{ document.cUnittitle }}
                        {%- else -%}
                            {% trans %}Untitled unit{% endtrans %}
                        {%- endif -%}
                        </a>
                    </h3>
                    {% endif %}

                    {% if show_pics %}
                    <figure class="result_pic{% if document.dao is not defined %} no-image{% endif %}">
                        {% if document.dao is defined %}
                            {{ displayDao(document.dao)|raw }}
                        {% else %}
                            <img src="{{ asset('img/blank.gif') }}" alt=""/>
                        {% endif %}
                    </figure>
                    {% endif %}

                    {% if view == 'list' or view == 'txtlist' %}
                    <div{% if not show_pics %} class="nopic"{% endif %}>
                    <h3 property="dc:title">
                        <a href="{{ path('bach_display_document', {docid: document.fragmentid}) }}" class="display_doc">
                        {%- if hlSearchResults.getResult(document.uniqid).getField('cUnittitle')|length > 0 -%}
                            {{ hlSearchResults.getResult(document.uniqid).getField('cUnittitle')[0]|raw }}
                        {%- elseif document.cUnittitle is defined -%}
                            {{ document.cUnittitle }}
                        {%- else -%}
                            {% trans %}Untitled unit{% endtrans %}
                        {%- endif -%}
                        </a>
                    </h3>
                    {%- if document.parents_titles is defined -%}
                        {% set parents_ids = document.parents|split('/') %}
                        <p>
                            {% for ptitle in document.parents_titles %}
                                <a href="{{ path('bach_display_document', {docid: document.headerId ~ '_' ~ parents_ids[loop.index0]}) }}" property="dc:isPartOf">
                                    {{ ptitle }}
                                </a>
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                        </p>
                    {%- endif -%}

                    {{ displayFragment(document.fragment, document.fragmentid)|raw }}
                    </div>
                    {% endif %}
                </article>
            {% endfor %}
            {% include 'pagination.html.twig' with {
                currentFilters: { query_terms: q },
                currentPage: page,
                paginationPath: 'bach_search',
                lastPage: totalPages
            } only %}
        {% else %}
            <p>{% trans %}No result found.{% endtrans %}</p>
            {% if scSearchResults is not null %}
            <aside id="suggestions">
                {% trans %}Spelling suggestions:{% endtrans %}
                {% for suggestion in scSearchResults %}
                    {% for word in suggestion.getWords() %}
                        <a href="{{ path('bach_search', {query_terms: word.word}) }}">{{ word.word }}</a>
                    {% endfor %}
                {% endfor %}
            </aside>
            {% endif %}
        {% endif %}
    </section>
    {% endif %}
{% endblock %}

{# Binded when not in mobile mode #}
{% block mobile_js_off %}
    $('.display_doc').click(function(event){
        event.stopImmediatePropagation();
        event.preventDefault();

        var _elt = $('<div id="display_doc" title="{% trans %}Consult document{% endtrans %}"></div>');
        _elt.appendTo('body');

        var _width = $(window).width() * 0.8;
        var _height = $(window).height() * 0.8;

        $.ajax({
            url: $(this).attr('href') + '/ajax',
            beforeSend: function() {
                var _img = $('<figure id="loading"><p><img src="{{ asset('img/loading.png') }}" alt="{% trans %}Loading...{% endtrans %}"/><br/>{% trans %}Currently loading...{% endtrans %}</p></figure>');
                $('body').append(_img);
            },
            complete: function() {
                $('#loading').remove();
            },
            success: function(data) {
                _elt.append(data);
                _initflow(true);
                _elt.dialog({
                    height: _height,
                    width: _width,
                    modal: true,
                    close: function(event, ui){
                        _elt.remove();
                    }
                });
            },
            error: function(){
                alert('{% trans %}An error occured loading terms :({% endtrans %}');
            }
        });

        return false;
    });

    $('.show_more a').click(function() {
        var _this = $(this);
        var _facet_name = $(_this.parents('div')[0]).prev('h3').text();

        var _elt = $('<div id="display_facets" title="' + _facet_name + '"></div>');
        _elt.appendTo('body');

        var _width = $(window).width() * 0.8;
        var _height = $(window).height() * 0.8;

        $.ajax({
            url: _this.attr('href') + '/ajax',
            data: {
                orig_href: _this.attr('href') + '/ajax'
            },
            type: 'POST',
            beforeSend: function() {
                var _img = $('<figure id="loading"><p><img src="{{ asset('img/loading.png') }}" alt="{% trans %}Loading...{% endtrans %}"/><br/>{% trans %}Currently loading...{% endtrans %}</p></figure>');
                $('body').append(_img);
            },
            complete: function() {
                $('#loading').remove();
            },
            success: function(data) {
                _elt.append(data);
                _elt.dialog({
                    height: _height,
                    width: _width,
                    modal: true,
                    close: function(event, ui){
                        _elt.remove();
                    }
                });
            },
            error: function(){
                alert('{% trans %}An error occured loading terms :({% endtrans %}');
            }
        });

        return false;
    })
{% endblock %}

{# Binded when in mobile mode #}
{% block mobile_js_on %}
    $('.display_doc').unbind('click');
{% endblock %}

{% block js_calls %}
    {{ parent() }}
    <script src="{{ asset('js/jquery-ui/jquery.ui.accordion.min.js')  }}" type="text/javascript"></script>
    <script src="{{ asset('js/jquery-ui/jquery.ui.menu.min.js')  }}" type="text/javascript"></script>
    <script src="{{ asset('js/jquery-ui/jquery.ui.autocomplete.min.js')  }}" type="text/javascript"></script>
    <script src="{{ asset('js/jQDateRangeSlider-min.js')  }}" type="text/javascript"></script>
    <script src="{{ asset('js/flot/jquery.flot.min.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/flot/jquery.flot.selection.min.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/jquery.cookie.js') }}" type="text/javascript"></script>
{% if show_maps %}
    <script src="{{ asset('js/leaflet/leaflet.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/leaflet/leaflet.fullscreen/Control.FullScreen.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/leaflet/leaflet.geosearch/l.control.geosearch.js') }}" type="text/javascript"></script>
    <script src="{{ asset('js/leaflet/leaflet.geosearch/l.geosearch.provider.openstreetmap.js') }}" type="text/javascript"></script>
{% endif %}
    <!--[if lte IE 8]><script src="{{ asset('js/jqplot/excanvas.min.js') }}" type="text/javascript"></script><![endif]-->
    <script src="{{ asset('js/flowplayer-3.2.12.min.js') }}" type="text/javascript"></script>
{% endblock %}

{% block javascripts %}
            var _menu_visible = true;
            $.cookie.json = true;
            var _view_params = $.cookie('bach_view_params');

            if ( !_view_params ) {
                _view_params = {
                    'daterange': {% if show_daterange == true %}true{% else %}false{% endif %},
                    'map':       {% if show_map == true %}true{% else %}false{% endif %}
                };
            }

            function filterOnDate(min_date, max_date) {
                var _loc = document.location.href;
                var n = _loc.indexOf('?');
                var _new_loc = _loc.substring(0, n != -1 ? n : _loc.lenght);

                if ( min_date == '{{ selected_min_date }}'
                    && max_date != '{{ selected_max_date }}'
                ) {
                    //nothing has changed!
                    return false;
                }

                _new_loc += '?filter_field[]=cDateBegin&filter_value[]=' + min_date +
                    '&filter_field[]=cDateEnd&filter_value[]=' + max_date;
                document.location = _new_loc;
            }

            $('#facets').accordion({
                icons: {
                    header: 'ui-icon-circle-plus',
                    activeHeader: 'ui-icon-circle-minus'
                },
                heightStyle: 'content',
                collapsible: true
            });

            $('#results_order').change(function(){
                var _da_url = '{{ path('bach_search', {query_terms: q, results_order: 'ORDER'}) }}';
                window.location.href  = _da_url.replace('ORDER', $('#results_order option:selected').val());
            });

            {% if min_date is defined and max_date is defined %}
            var _is_first_load = true;
            if ( _view_params['daterange'] == true ) {
                $('#dates_range').removeClass('hidden');
            }
            $('#dates_range').dateRangeSlider({
                formatter:function(val){
                    var year = val.getFullYear();
                    return year;
                },
                arrows: false,
                step: {
                    {{ date_step_unit }}: {{ date_step }}
                },
                bounds:
                {
                    min: new Date({{ min_date }}, 0, 1),
                    max: new Date({{ max_date }}, 11, 31)
                },
                defaultValues:
                {
                    min: new Date({{ selected_min_date }}, 0, 1),
                    max: new Date({{ selected_max_date }}, 11, 31)
                }
            }).bind("valuesChanged", function(e, data){
                if ( _is_first_load ) {
                    //valuesChanged is always triggerd once, on page load...
                    _is_first_load = false;
                } else {
                    var _min = data.values.min;
                    var _max = data.values.max;

                    filterOnDate(
                        _min.getFullYear(),
                        _max.getFullYear()
                    );
                }
            });

            var plot_options = {
                series: {
                    bars: {
                        show: true,
                        align: "center",
                        fill: true,
                        fillColor: "rgb(183,58,52)"
                    }
                },
                colors: ["rgba(163,150,141,0)"],
                legend: { noColumns: 2 },
                xaxis: { tickDecimals: 0 },
                yaxis: { min: 0, ticks: [] },
                selection: {mode: "x"},
                grid: {
                    backgroundColor: null,
                    borderWidth: 1,
                    borderColor: "rgb(163,150,141)"
                }
            };

            var _dates_plot = $('#dates_plot');
            var plot;

            var _initPlot = function() {
                plot = $.plot(_dates_plot, [{{ by_year|json_encode|raw }}], plot_options);

                plot.setSelection({
                    xaxis: {
                        from: {{selected_min_date}},
                        to: {{selected_max_date}}
                    }
                });

                _dates_plot.bind("plotselected", function (event, ranges) {
                    filterOnDate(
                        Math.floor(ranges.xaxis.from),
                        Math.ceil(ranges.xaxis.to)
                    );
                });
            }

            if ( _view_params['daterange'] == true ) {
                _dates_plot.removeClass('hidden');
                _initPlot();
            }
            {% endif %}

            _setCookie = function() {
                $.cookie('bach_view_params', _view_params, { expires: 365 });
            }

            $('#sh_daterange').on('click', function(){
                $('#dates_plot').toggleClass('hidden');
                if ( !plot) {
                    _initPlot();
                }
                $('#dates_range').toggleClass('hidden');
                _view_params['daterange'] = !$('#dates_plot').hasClass('hidden');
                _setCookie();
                return false;
            });
{% if show_maps %}
    {% if geojson is defined and geojson != null %}
            $('#sh_map').on('click', function(){
                $('#map').toggleClass('hidden');
                _view_params['map'] = !$('#map').hasClass('hidden');
                _setCookie();
                if ( !map ) {
                    _initMap();
                }
                return false;
            });

            var map;

            var _initMap = function() {
                map = L.map('map');

                var fullScreen = new L.Control.FullScreen();
                map.addControl(fullScreen);

                new L.Control.GeoSearch({
                    provider: new L.GeoSearch.Provider.OpenStreetMap(),
                    showMarker: false,
                    searchLabel: '{{ 'Enter your search...'|trans|escape('js') }}',
                    notFoundMessage: '{{ 'Sorry, that place cannot be found.'|trans|escape('js') }}',
                    zoomLevel: 10
                }).addTo(map);

                L.tileLayer('http://{s}.tile.cloudmade.com/852b7821064f43a59604e98d9536680b/997/256/{z}/{x}/{y}.png', {
                    maxZoom: 18,
                    attribution: '{% trans %}© Cartographic data{% endtrans %} <a href="http://openstreetmap.org">{% trans%}OpenStreetMap contributors{% endtrans %}</a>, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, {% trans %}© Imagery{% endtrans %} <a href="http://cloudmade.com">CloudMade</a>'
                }).addTo(map);

                // control that shows location info on hover
                var info = L.control();

                info.onAdd = function (map) {
                    this._div = L.DomUtil.create('div', 'info');
                    this.update();
                    return this._div;
                };

                info.update = function (props) {
                    this._div.innerHTML = (props ?
                        '<strong>' + props.name + '</strong> - ' + props.results
                        : '{% trans %}Hover over a zone{% endtrans %}');
                };

                info.addTo(map);

                // get color depending on number of results
                function getColor(d) {
                    return d > 200 ? '#800026' :
                        d > 100    ? '#BD0026' :
                        d > 50     ? '#E31A1C' :
                        d > 20     ? '#FC4E2A' :
                        d > 10     ? '#FD8D3C' :
                        d > 5      ? '#FEB24C' :
                        d > 1      ? '#FED976' :
                                    '#FFEDA0' ;
                }

                function style(feature) {
                    return {
                        weight: 2,
                        opacity: 1,
                        color: 'white',
                        dashArray: '3',
                        fillOpacity: 0.7,
                        fillColor: getColor(feature.properties.results)
                    };
                }

                function highlightFeature(e) {
                    var layer = e.target;

                    try{
                        layer.setStyle({
                            weight: 1,
                            color: '#666',
                            dashArray: '',
                            fillOpacity: 0.7
                        });

                        if (!L.Browser.ie && !L.Browser.opera) {
                            layer.bringToFront();
                        }
                    } catch (ex) {}

                    info.update(layer.feature.properties);
                }

                var allpoints;

                function resetHighlight(e) {
                    allpoints.resetStyle(e.target);
                    info.update();
                }

                function facetFeature(e) {
                    var _da_url = '{{ path('bach_search', {query_terms: q, filter_field: 'cGeogname'}) }}';
                    window.location.href  = _da_url + '&filter_value=' + e.target.feature.properties.name;
                }

                function onEachFeature(feature, layer) {
                    layer.on({
                        mouseover: highlightFeature,
                        mouseout: resetHighlight,
                        click: facetFeature
                    });
                }

                allpoints = L.geoJson({{ geojson|raw  }}, {
                    style: style,
                    onEachFeature: onEachFeature
                })

                var _layers = L.layerGroup([allpoints]).addTo(map);
                map.fitBounds(allpoints.getBounds(), {
                    padding: [50, 50],
                    maxZoom: 13
                });

                var _legend;

                function _loadLegend() {
                    _legend = L.control({position: 'bottomright'});
                    _legend.onAdd = function (map) {

                        var div = L.DomUtil.create('div', 'info legend'),
                            {# TODO: it would be better to set grades dynamically as it depends on search results/corpus #}
                            grades = [0, 1, 5, 10, 20, 50, 100, 200],
                            labels = [],
                            from, to;

                        for (var i = 0; i < grades.length; i++) {
                            from = grades[i];
                            to = grades[i + 1];

                            labels.push(
                                '<i style="background:' + getColor(from + 1) + '"></i> ' +
                                from + (to ? '&ndash;' + to : '+'));
                        }

                        div.innerHTML = labels.join('<br/>');
                        return div;
                    };
                };

                var _zones_loaded = false;
                var _state_changed = false;
                var _zones_layer;

                function checkZones(e) {
                    zoom = map.getZoom();

                    if ( zoom >= 9 ) {
                        //if we've just zoomed, or if we drag map, reload zones
                        _zones_loaded = true;
                        var _da_url = '{{ path('bach_geozones', {bbox: 'BBOX'}) }}';

                        $.ajax({
                            url: _da_url.replace('BBOX', map.getBounds().toBBoxString()),
                            success: function(data) {
                                if ( !_zones_layer ) {
                                    _zones_layer = L.geoJson(data, {
                                        style: style,
                                        onEachFeature: onEachFeature
                                    });
                                    _layers.addLayer(_zones_layer);
                                    _state_changed = true;

                                } else {
                                    if ( !_layers.hasLayer(_zones_layer) ) {
                                        _layers.addLayer(_zones_layer);
                                        _state_changed = true;
                                    }

                                    _zones_layer.clearLayers();
                                    _zones_layer.addData(data);
                                }

                                if ( _state_changed ) {
                                    if ( !_legend ) {
                                        _loadLegend();
                                    }

                                    if ( e && e.type != 'dragend' ) {
                                        _legend.addTo(map);
                                    }
                                    _state_changed = false;
                                }

                            }
                        });
                    }

                    if ( zoom < 9 && _zones_loaded == true ) {
                        _zones_loaded = false;
                        _layers.removeLayer(_zones_layer);
                        map.removeControl(_legend);
                    }
                }

                map.on('zoomend', checkZones);
                map.on('dragend', checkZones);
                map.on('resize', checkZones);
                checkZones();
            }

            if ( _view_params['map'] == true ) {
                $('#map').removeClass('hidden');
                _initMap();
            }
    {% endif %}
{% endif %}
            //handle viewer links
            //fullscreen does not work for the moment when binded into an iframe
            /*$('.result_pic > a').on('click', function(){
                var _this = $(this);
                if ( _this.find('img').length > 0 ) {
                    var _viewer = $('<iframe src="' + _this.attr('href')  + '"/>');
                    $('div.content, #refine').hide();
                    _viewer.appendTo('body');
                    return false;
                }
            });*/

            function preg_quote( str ) {
                // http://kevin.vanzonneveld.net
                // +   original by: booeyOH
                // +   improved by: Ates Goral (http://magnetiq.com)
                // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
                // +   bugfixed by: Onno Marsman
                // *     example 1: preg_quote("$40");
                // *     returns 1: '\$40'
                // *     example 2: preg_quote("*RRRING* Hello?");
                // *     returns 2: '\*RRRING\* Hello\?'
                // *     example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
                // *     returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'

                return (str+'').replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1");
            }

            $('#searchQuery_query').autocomplete({
                source: function(request, response) {
                    $.getJSON(
                        '{{ path('bach_suggest') }}', {
                            q: request.term
                        }, response
                    );
                }
            }).data('uiAutocomplete')._renderItem = function( ul, item ) {
                var newText = String(item.value).replace(
                    new RegExp(preg_quote(this.term), "gi"),
                    "<span class='ui-state-highlight'>$&</span>"
                );

                return $("<li></li>")
                    .data("item.autocomplete", item)
                    .append("<a>" + newText + "</a>")
                    .appendTo(ul);
            };

            {% include 'BachHomeBundle:Default:flowplayer.js.twig' %}
{% endblock %}
